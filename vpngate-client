#!/usr/bin/env python3

import argparse
import base64
import concurrent.futures
import csv
import io
import itertools
import logging
import socket
import subprocess
import urllib.request

# The URL for the VPN list
VPN_LIST_URL = "http://www.vpngate.net/api/iphone/"

logger = logging.getLogger()


class VPN:
    def __init__(self, data, args):
        # Command Line Arguments
        self.args = args

        # Logging
        self.logger = logging.getLogger("VPN:%s" % data["#HostName"])

        # VPN Information
        self.ip = data["IP"]
        self.country = data["CountryLong"]
        self.country_code = data["CountryShort"]

        # OpenVPN endpoint information
        self.proto = None
        self.port = None

        # OpenVPN Config
        conf = data["OpenVPN_ConfigData_Base64"]
        self.config = base64.b64decode(conf).decode("UTF-8")
        for line in self.config.splitlines():
            if line.startswith("remote"):
                _, ip, self.port = line.split(" ")
                assert ip == self.ip
            elif line.startswith("proto"):
                _, self.proto = line.split(" ")

        self.logger.debug("New VPN: ip=%s, proto=%s port=%s country=%s (%s)",
                          self.ip, self.proto, self.port, self.country,
                          self.country_code)

    def is_listening(self):
        """Probes the VPN endpoint to see if it's listening."""
        if self.proto == "udp":
            # TODO: Implement udp probing.
            self.logger.debug("UDP probing not implemented")
            return True

        self.logger.debug("Probing VPN endpoint")
        s = socket.socket()
        s.settimeout(self.args.timeout / 1000)
        try:
            # Try to connect to the VPN endpoint.
            s.connect((self.ip, int(self.port)))
            self.logger.debug("VPN endpoint is listening")
            return True
        except socket.timeout:
            self.logger.debug("VPN endpoint did not respond to connection")
            return False
        finally:
            s.shutdown(socket.SHUT_RDWR)
            s.close()

    def __str__(self):
        return "VPN(ip=%s, country=%s)" % (self.ip, self.country)


def parse_args():
    """Parses the command line arguments."""
    p = argparse.ArgumentParser(description="Client for vpngate.net VPNs")
    p.add_argument("--timeout", "-t", action="store", default=1000, type=int,
                   help="When probing, how long to wait for connection until " +
                        "marking the VPN as unavailable")
    p.add_argument("--url", "-u", action="store", default=VPN_LIST_URL,
                   help="URL of the VPN list (csv)")
    p.add_argument("--verbose", "-v", action="store_true", default=False,
                   help="More verbose output")
    p.add_argument("--probes", "-p", action="store", default=100, type=int,
                   help="Number of concurrent connection probes to send.")
    return p.parse_args()


def load_vpns(args):
    logger.info("Loading VPN list from %s", args.url)
    req = urllib.request.urlopen(args.url)
    data = io.TextIOWrapper(req, encoding='utf8')

    # The first line is garbage, the second line contains the header.
    rows = itertools.islice(data, 1, 50)

    # Parse the CSV
    reader = csv.DictReader(rows)

    # Create VPN instances; the last line only contains "*" which is ignored
    vpns = [VPN(row, args) for row in reader if row["#HostName"] != "*"]

    logger.info("Found %i VPN servers", len(vpns))
    return vpns


def get_responding_vpns(vpns, args):
    logger.info("Pinging VPN services")
    with concurrent.futures.ThreadPoolExecutor(max_workers=args.probes) as ex:
        futures = {ex.submit(vpn.is_listening): vpn for vpn in vpns}
        responding = []
        for future in concurrent.futures.as_completed(futures):
            vpn = futures[future]
            try:
                if future.result():
                    responding.append(vpn)
            except Exception as e:
                logger.warning("Ping failed: %s", e)

    logger.info("Found %i responding VPNs", len(responding))

    return responding

if __name__ == "__main__":
    args = parse_args()

    if args.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    vpns = load_vpns(args)
    responding_vpns = get_responding_vpns(vpns, args)
    for vpn in responding_vpns:
        print(vpn)
